<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title>On Confidence</title>
      <url>/opinions/2018/09/13/on-confidence/</url>
      <content type="text">Several days ago, I had a wonderful opportunity to be one of panelists in a Go-Talk session. The session was titled “The Power of Grit” and I was supposed to share my experience on developing grit. However, in this post I will not discuss about grit, I will discuss it in another post. Instead, I want to discuss about confidence.

But why? Well, because I think I made a mistake on this point when I answered one of the questions from a colleague in the audience. To be exact, the question was something along this line, “are you familiar with a term called ‘the imposter syndrome’? For me personally, working with these bright people around me sometimes make me feel like I am not good enough. Do you have any tips to be confidence?”

After a lot of thoughts, I consider my answer to the question was a mistake. I answered, nowadays I am not confident about a lot of things. I added, looking back, the period when I was confident about a lot of things was probably because at the time I was at the left side of the Dunning-Kruger effect curve. Self-doubt is good, I said, because it means that we know we have a lot to improve on ourselves.

This answer was a mistake, first and foremost, because I don’t know what confidence truly means. Now that I have time to look for a better answer, I find out that according to Merriam-Webster, confidence means, “a feeling or belief that you can do something well or succeed at something”. Imagine how terrible a person will grow if he/she does not believe in himself/herself!

To put in a better context, what do I usually do when I have to work on a problem that require tools that I am not familiar with or skills that I have not mastered yet? In a pair programming setting, I tend to try to be honest and say it upfront to my partners on what aspects I am lacking. This is okay, I think.

Sometimes I even lower the expectation by saying things such as, “I am total idiot on this”. I realize now that it might not be the correct way to behave. So far I am just lucky to have partners that don’t lose all their confidence on me the moment I said such things.

Then, what is the better answer? Is confidence good? Or is it bad? Should I be confident in my ability to solve a problem even though I don’t have all the answers upfront? Or should I always lower the expectations of everyone around me? Where is the border between being confident and being smug? Where is the line between humility and inferiority?

Frankly speaking, I don’t have a definite answer to the questions above even now. But I do think the following excerpt from Paul Graham’s essay titled “The Dream Language” is a good first step towards answering those questions:


  To write good software you must simultaneously keep two opposing ideas in your head. You need the young hacker’s naive faith in his abilities, and at the same time the veteran’s skepticism. You have to be able to think, “how hard can it be?” with one half of your brain while thinking, “it will never work” with the other.

  The trick is to realize that there’s no real contradiction here. You want to be optimistic and skeptical about two different things. You have to be optimistic about the possibility of solving the problem, but skeptical about the value of whatever solution you’ve got so far.

  People who do good work often think that whatever they’re working on is no good. Others see what they’ve done and think it’s wonderful, but the creator sees nothing but flaws. This pattern is no coincidence: worry made the work good.

  If you can keep hope and worry balanced, they will drive a project forward the same way your two legs drive a bicycle forward. In the first phase of the two-cycle innovation engine, you work furiously on some problem, inspired by your confidence that you’ll be able to solve it. In the second phase, you look at what you’ve done in the cold light of morning and see all its flaws very clearly. But as long as your critical spirit doesn’t outweigh your hope, you’ll be able to look at your admittedly incomplete system and think, “how hard can it be to get the rest of the way?”


What do you think?
</content>
      <categories>
        
          <category> Opinions </category>
        
      </categories>
      <tags>
        
          <tag> Growth </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title>Setting Up Rails Development Environment with Docker Compose</title>
      <url>/tech/2018/08/05/setting-up-rails-development-environment-with-docker-compose/</url>
      <content type="text">Hi folks! This guide is mostly written for participants of Go-Jek x BNCC bootcamp. But anyone who wishes to know how to setup his/her Rails development environment with Docker Compose is welcome as well. Just note that some examples here are specific to the sources I use for the bootcamp.

Since this guide is aimed at students who might be not familiar yet with containers in general, let me explain in a brief what containers are. Containers are a method of operating system virtualization that allow us to run an application and its dependencies in isolation within our actual operating system on our machine (be it a laptop, desktop, or some remote hosted server). Docker is one of container platform tools that we can use to build and manage containers. 
Lastly, Docker Compose is a tool for defining and running multi-container Docker applications.

You probably now have more questions than answers after reading the paragraph above. That is fine. In fact, that is great. If you are curious about container technology, you can read more about it in this post.

Prerequisite


  
    Install Docker on Your Machine

    Since you are likely have different machines and operating systems (MacOS, Linux, Windows), I would rather you take a look at Docker official documentation and try to install it by following the guideline there on your own.
  


Setup


  
    Create Dockerfile

    In your working directory, create a file named Dockerfile and fill it with:

      FROM ruby:2.5
  RUN apt-get update -qq &amp;amp;&amp;amp; apt-get install -y build-essential libpq-dev nodejs
  RUN mkdir /bncc
  WORKDIR /bncc
  COPY Gemfile /bncc/Gemfile
  COPY Gemfile.lock /bncc/Gemfile.lock
  RUN bundle install
  COPY . /bncc

    

    Just note that you can use replace bncc with any directory name that you want.
  
  
    Create Initial Gemfile

    Now, create a file named Gemfile and fill it with:

      source 'https://rubygems.org'
  gem 'rails', '5.0.2'
  gem 'public_suffix', '~&amp;gt; 3.0.2'

    

    This will install required gems specific to our workshop requirements (Rails version 5.0.2).
  
  
    Create Gemfile.lock

    Create a file named Gemfile.lock and leave it empty for the time being.
  
  
    Create docker-compose.yaml

    Create a file named docker-compose.yaml and fill it with:

      version: '3'
  services:
    db:
      image: postgres
      volumes:
        - ./tmp/db:/var/lib/postgresql/data
    web:
      build: .
      command: bundle exec rails s -p 3000 -b '0.0.0.0'
      volumes:
        - .:/bncc
      ports:
        - &quot;3000:3000&quot;
      depends_on:
        - db

    

    Don’t forget to replace bncc with the name of directory that you use in Step 1.
  
  
    Build The Project

    Run this command:

      docker-compose run web rails new . --force --database=postgresql

    

    ONLY FOR LINUX USERS: If you run the previous command in Linux, there is a good chance that your newly created files are created with root account by Docker. You need to change them to regular files by running the following command:

      sudo chown -R $USER:$USER .

    

    Now this part is for everyone again, run the following command:

      docker-compose build

    

    It may take some time as Docker needs to download and setup a lot of things for your development environment.
  
  
    Modify Database Configuration

    Next, we need to change our config/database.yml file. Make sure your database configuration file has the following lines:

      default: &amp;amp;default
    adapter: postgresql
    encoding: unicode
    host: db
    username: postgres
    password:
    pool: 5

  development:
    &amp;lt;&amp;lt;: *default
    database: bncc_development

  test:
    &amp;lt;&amp;lt;: *default
    database: bncc_test

    
  
  
    Boot The App

    Once the previous command is finished, you can boot your app with:

      docker-compose up

    

    Afterward, we need to create the database. Do the following command in the same folder but from a different terminal:

      docker-compose run web rake db:create

    

    Now you should be able to see the Rails welcome page when you open localhost:3000 from your browser.
  


Usage


  
    Find Your Container

    Now that you have Docker container up and running, you can get inside your container. First you need to know the name of your container. Find out with:

      docker ps

    

    The result should look something like this (you might need to scroll to the right):

      CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
  0e1bb4260f52        bncc_web            &quot;bundle exec rails s…&quot;   14 seconds ago      Up 13 seconds       0.0.0.0:3000-&amp;gt;3000/tcp   bncc_web_1
  3bc7089f6ccd        postgres            &quot;docker-entrypoint.s…&quot;   8 minutes ago       Up 14 seconds       5432/tcp                 bncc_db_1

    

    In this case, the name of the container that we want to enter is bncc_web_1.
  
  
    Enter The Container

    Run the following command:

      docker exec -it bncc_web_1 /bin/bash

    

    Don’t forget to replace bncc_web_1 with the actual name that you see as the result of your docker ps command.

    Now you can make changes to your Rails project from your host operating system while run terminal commands in your Docker /bin/bash environment.
  
  
    Stop and Start

    To stop your app, run this command in a different terminal from the one that runs your docker-compose up:

      docker-compose down

    

    To start it again, you might have guessed it right by now:

      docker-compose up

    
  

</content>
      <categories>
        
          <category> Tech </category>
        
      </categories>
      <tags>
        
          <tag> Container </tag>
        
          <tag> Docker </tag>
        
          <tag> Rails </tag>
        
          <tag> Ruby </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title>Yang Fana adalah Waktu, Pragmatisme Abadi</title>
      <url>/books/2018/07/08/yang-fana-adalah-waktu-pragmatisme-abadi/</url>
      <content type="text">Sudah sekitar tujuh bulan terakhir saya banting setir. Setelah delapan tahun lebih menyebut diri sendiri sebagai seorang Ruby programmer, pada awal Januari tahun ini saya beralih menjadi seorang system engineer. Salah satu dampak utama dari alih profesi ini, saya harus belajar banyak hal baru. Bagaimana tidak, ketika pertama kali mendapat brief tentang peran baru saya ini, barangkali sekitar 80% teknologi yang diucapkan pada brief tersebut belum pernah saya gunakan secara profesional.

Tiap orang tentu punya cara yang berbeda dalam mempelajari sesuatu. Bagi saya, cara yang sejauh ini terbukti efektif buat diri sendiri adalah dengan membaca beberapa buku tentang topik yang sedang saya pelajari. Untuk mempelajari tentang Kubernetes, misalnya, saya membaca dua judul buku, “Kubernetes: Up and Running” dan “Kubernetes in Action”. Belajar dari beberapa buku memberi saya perspektif yang lebih beragam mengenai satu topik. Konsep semacam namespace pada container, misal yang lain, terasa lebih mudah dan lebih komprehensif untuk dipahami ketika saya mempelajarinya dari beberapa sumber.

Salah satu rule of thumb yang saya pegang dalam mencari buku bacaan untuk mempelajari sebuah topik adalah tidak menggunakan buku yang terbit lebih lampau dari tiga tahun lalu. Aturan ini menjadi relevan teruma ketika topik yang dipelajari adalah teknologi informasi. Pasalnya, perkembangan teknologi informasi memang relatif cepat. Jika kita menggunakan buku yang tidak up to date, besar kemungkinan ada perubahan pada teknologi yang kita pelajari yang belum terdokumentasikan di buku tersebut.

Sebagai contoh spesifik, kalau hari ini kita mempelajari framework Ruby on Rails dari buku “Agile Development Method with Rails 4” terbitan tahun 2013, kita akan menemukan beberapa kendala karena versi Rails yang diulas pada buku tersebut masih Rails 4 sementara versi Rails default yang bisa kita unduh dari situs resmi Rails saat ini adalah Rails 5.1. Beberapa fitur baru yang ada di Rails 5.1 tentu tidak akan kita temui pada buku tersebut. Sementara beberapa fitur yang sudah deprecated pada Rails 5.1 barangkali masih diulas di sana.

Oleh karena itu, rasanya tak keliru kalau saya katakan sangat sulit untuk menulis sebuah buku tentang teknologi informasi yang bersifat teknis sekaligus tetap relevan dalam waktu yang lama. Buku semacam “Agile Development Method with Rails” menyiasatinya dengan perbaruan terus menerus. Edisi terakhir “Agile Development Method with Rails 5.1” dirilis pada November 2017 lalu, hanya berjarak sekitar satu tahun dari “Agile Development with Rails 5” yang dirilis pada September 2016.



Satu dari sedikit buku yang berhasil melawan kutukan keusangan adalah buku The Pragmatic Programmer karya David Thomas dan Andrew Hunt. Dipublikasikan pertama kali pada Oktober 1999, The Pragmatic Programmer masih terasa relevan bagi saya saat ini. Hampir dua puluh tahun sejak terbitan perdananya, apa-apa yang ditulis oleh Thomas dan Hunt di The Pragmatic Programmer masih beresonansi dengan masalah yang kita temui di industri teknologi informasi hari-hari ini.

Saya ambil contoh prinsip don’t repeat yourself atau DRY. Secara verbatim, prinsip ini didefinisikan oleh Thomas dan Hunt di The Pragmatic Programmer dengan redaksi sebagai berikut, “every piece of knowledge must have a single, unambiguous, authoritative representation within a system”. Salah satu penerapan awal dari prinsip ini adalah dengan melakukan otomasi terhadap dokumentasi kode. Dalam perkembangannya, prinsip ini menjadi salah satu faktor yang mendorong lahirnya disiplin Infrastructure as Code dan declarative programming.

Apa yang membuat The Pragmatic Programmer tak lekang waktu? Saya kira salah satunya adalah karena pola pikir kedua penulisnya yang memandang bahwa ilmu, pengetahuan, dan pengalaman seorang programmer harus dikelola selayaknya portofolio investasi finansial. Thomas dan Hunt secara eksplisit menyebutnya sebagai “portofolio pengetahuan”.

Layaknya seorang investor finansial, menurut Thomas dan Hunt, seorang programmer yang baik harus berinvestasi secara reguler. Implikasinya, seorang programmer harus senantiasa mempelajari hal baru, melakukan diversifikasi teknologi yang dipelajarinya, dan mengelola resiko investasi dengan baik. Mempelajari teknologi cutting edge, misalnya, bisa dikategorikan sebagai investasi high risk yang harus diimbangi dengan mempelajari lebih dalam teknologi yang lebih mature dan memang digunakan dalam pekerjaan kita sehari-hari. Thomas dan Hunt bahkan merinci beberapa langkah kongkret yang perlu dilakukan oleh seorang programmer untuk memperkaya portofolio pengetahuannya. Langkah-langkah tersebut di antaranya: mempelajari minimal satu bahasa pemrograman setiap tahun, membaca satu buku teknis setiap satu kuartal, membaca buku-buku non teknis, dan berjejaring dengan komunitas teknologi.

Dengan pola pikir di atas, saya kira tak mengherankan jika Thomas dan Hunt berhasil menuliskan prinsip-prinsip fundamental yang cenderung terus relevan dengan permasalahan yang ditemui oleh para programmer hingga hari ini, meski mungkin dalam bentuk yang sedikit berbeda. Prinsip meminimalisir coupling antar tiap bagian dalam kode kita, misalnya, di masa The Pragmatic Programmer ditulis barangkali baru dipraktekkan dalam bentuk penerapan Law of Demeter ketika menulis fungsi atau method. Namun prinsip yang sama, saya duga, menjadi salah satu fondasi bagi lahirnya arsitektur seperti MVC dan microservices di kemudian hari.



Awal bulan lalu saya mengambil mata kuliah tentang Cloud Computing dari University of Illinois melalui platform e-learning Coursera. Sebagai proyek akhir mata kuliah ini, siswa ditugaskan untuk mengimplementasikan Gossip Protocol dengan menggunakan bahasa C++. Gossip Protocol adalah sebuah prosedur komunikasi untuk mendistribusikan informasi secara cepat pada sebuah distributed system. Tugas tadi menarik karena ketika saya mulai mengambil mata kuliah ini, pada saat yang bersamaan saya sedang mengerjakan beberapa tugas kantor yang berkaitan dengan Consul. Bagi kawan-kawan yang belum familiar, Consul adalah sebuah service discovery tools yang biasa digunakan pada sistem dengan arsitektur microservices. Nah, Consul dibangun dengan menggunakan Gossip Protocol untuk mengelola keanggotaan sebuah service pada cluster dan untuk melakukan broadcast pesan ke seluruh cluster.

Ketika mengambil mata kuliah ini, saya menyadari panjangnya jalan yang dibutuhkan untuk mengubah konsep akademis seperti Gossip Protocol menjadi sebuah tools yang diadopsi secara luas oleh industri seperti Consul. Hal yang sama juga saya temui pada Raft Protocol yang menjadi basis dari tools bernama etcd yang kemudian menjadi salah satu komponen penting dalam membuat sebuah cluster Kubernetes. Perlu craftmanship dan mastery pada pemrograman dan software engineering untuk bisa menciptakan tools semacam ini.

Kembali ke buku The Pragmatic Programmer, sejujurnya saya agak khawatir review pendek ini gagal menjadi duta yang representatif bagi buku ini. Penyebabnya, masih banyak poin penting yang belum saya singgung pada tulisan yang singkat ini. Hampir setiap gagasan utama yang diulas di The Pragmatic Programmer bisa dibahas secara panjang lebar dalam satu atau bahkan beberapa tulisan tersendiri.

Kalau ada satu saja poin yang tak boleh tertinggal dari review ini, barangkali adalah poin berikut: pada buku The Pragmatic Programmer, Thomas dan Hunt memaparkan dengan lengkap apa-apa yang menurut keduanya perlu bagi seorang yang ingin membangun mastery dan craftmanship di bidang pemrograman maupun software engineering secara umum. Dalam delapan bab, Thomas dan Hunt membahas mulai dari filosofi, pola pikir, pendekatan, hingga tools yang perlu dimiliki oleh seorang pragmatic programmer.

Pada akhirnya, kalau ada kawan-kawan yang berkecimpung di bidang pemrograman atau software engineering secara umum, saya sangat merekomendasikan untuk paling tidak pernah satu kali khatam membaca The Pragmatic Programmer. Sejauh ini gagasan-gagasan pada The Pragmatic Programmer telah menginspirasi saya untuk melakukan beberapa hal dalam upaya mengembangkan diri secara personal dan profesional, tentunya saya berharap kawan-kawan mendapatkan inspirasi yang sama.

</content>
      <categories>
        
          <category> Books </category>
        
      </categories>
      <tags>
        
          <tag> Book Review </tag>
        
          <tag> The Pragmatic Programmer </tag>
        
          <tag> Software Engineering </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title>Hello World!</title>
      <url>/2018/02/16/hello-world/</url>
      <content type="text">Hello World! My name is Iqbal Farabi and I write codes for a living. I will write posts on software engineering topics in this blog. Mainly, I will try to share things I learn from my activities, both in my daily work or in my own time as a hobby. Hopefully this blog is any use for you!

Halo! Perkenalkan, nama saya Iqbal Farabi. Sehari-hari saya bekerja sebagai seorang backend engineer. Blog ini akan berisi tulisan-tulisan yang berhubungan dengan software engineering. Utamanya, saya akan berusaha untuk berbagi hal-hal yang saya pelajari dari aktivitas saya, baik yang bersifat profesional di pekerjaan saya sehari-hari maupun yang bersifat hobi. Harapan saya, semoga blog ini bermanfaat bagi pembacanya.
</content>
      <categories>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
