<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title>Yang Fana adalah Waktu, Pragmatisme Abadi</title>
      <url>/books/2018/03/03/Yang-Fana-Adalah-Waktu-Pragmatisme-Abadi/</url>
      <content type="text">Sekitar sembilan tahun yang lalu, saya, Gio, Tara, dan Raymond (dan juga tiga orang teman lain) bertaruh nasib dan mencoba peruntungan kami dengan merintis usaha IT sendiri. Sisi positif dari merintis usaha sendiri adalah tidak ada yang mengatur apa yang harus kami kerjakan. Sisi negatif dari merintis usaha sendiri adalah tidak ada yang mengatur apa yang harus kami kerjakan. Jadi, di satu sisi, kami bisa memilih mengerjakan apa saja yang kami mau tanpa ada yang melarang. Namun di sisi lain, tidak ada yang memberitahu apa yang sebaiknya kami kerjakan. Hampir untuk semua hal, kami harus mencari tahu sendiri dan kemudian memutuskan untuk diri kami sendiri.

Salah satu hal yang harus kami tentukan sendiri adalah teknologi apa yang kami gunakan dalam pengembangan perangkat lunak untuk proyek-proyek yang kami kerjakan. Atas usulan Gio, kami setuju untuk mempelajari sebuah framework yang waktu itu masih tergolong sangat “eksotik” di Indonesia: Ruby on Rails. Kalau sekarang saya menengok ke belakang, rasanya keputusan untuk mempelajari dan menggunakan framework Ruby on Rails ini merupakan salah satu keputusan yang berdampak sangat besar terhadap karir profesional saya sejauh ini.

Dari sekian banyak dampak memilih Ruby on Rails terhadap perjalanan karir saya, yang paling relevan untuk tulisan ini adalah kenyataan bahwa saat itu kami harus mempelajari bahasa pemrograman Ruby secara mandiri. Karena Ruby sama sekali belum pernah diajarkan semasa kuliah dan saat itu kami pun sudah tak lagi berstatus mahasiswa, tidak ada bimbingan dari sosok seperti dosen ketika kami mempelajari Ruby. Begitu pula, karena kami tidak memiliki atasan di perusahaan yang kami dirikan sendiri, tak ada sosok semacam mentor yang bisa memberi pointer jika kami mengalami kebuntuan.

Untungnya, semasa kuliah, kurikulum mata kuliah programming di Teknik Informatika ITB lebih menekankan pada aspek fundamental pemrograman tanpa terikat pada implementasi bahasa pemrograman tertentu. Pada tiga mata kuliah pemrograman (Algoritma dan Pemrograman, Struktur Data, dan Pemrograman Berorientasi Objek) yang diajarkan di kampus, semua kode yang diajarkan di kelas ditulis dalam sebuah pseudo-language, serupa dengan yang digunakan oleh Donald Knuth dalam bukunya The Art of Computer Programming. Baru ketika praktikum di lab kami menulis kode dengan bahasa pemrograman yang sesungguhnya. Dalam kuliah Pemrograman Berorientasi Objek, misalnya, kami melakukan praktikum dengan bahasa pemrograman C++ pada paruh pertama perkuliahan dan Java pada paruh kedua. Dengan memisahkan mana konsep Object Oriented Programming yang generik dan mana implementasi yang spesifik pada tiap-tiap bahasa pemrograman, saya rasa, kami diajarkan untuk menjadi programmer yang versatile.

Versatility menjadi atribut yang penting bagi seorang programmer karena industri yang ia geluti merupakan sebuah industri yang sangat cepat perubahannya. Dari sudut pandang konsumen saja, dalam satu dekade terakhir terjadi perubahan yang signifikan dalam cara kita berkomunikasi. Di Indonesia, pada tahun 2007, moda komunikasi yang paling sering kita guanakan barangkali SMS. Sekitar tahun 2009-2012, siapa saja yang tak punya PIN BlackBerry Messenger barangkali bisa menjadi social outcast di komunitasnya. Akhir 2017 lalu, dengan data dominasi &amp;gt;88% pangsa pasar sistem operasi Android di Indonesia (sumber: Statista), rasanya tidak keliru kalau saya katakan bahwa mayoritas kita berkomunikasi sehari-hari dengan aplikasi seperti WhatsApp atau Line. Saking cepatnya industri IT, industri musik dangdut saja tak mampu mengimbangi. Dari ketiga moda komunikasi tadi, kalau saya tidak salah, baru SMS yang sudah memiliki lagu dangdut sendiri.



Dengan karakter industri IT yang cepat berubah tadi, bisa dibayangkan bagaimana sulitnya menulis buku IT yang bisa tetap relevan untuk waktu yang lama. Pada tahun 1999, David Thomas dan Andrew Hunt berhasil melakukan pekerjaan sulit tersebut dengan buku mereka The Pragmatic Programmer. Hampir dua dekade setelah pertama kali dipublikasikan, The Pragmatic Programmer masih terasa sangat relevan, paling tidak bagi saya yang baru pertama kali berhasil khatam membaca buku tersebut pada akhir Februari kemarin.

Tulisan ini merupakan review saya terhadap buku The Pragmatic Programmer. Review ini tidak akan berisi ringkasan yang saya pelajari dari tiap bab buku The Pragmatic Programmer. Ada learning notes yang nanti akan saya tulis terpisah untuk itu. Meskipun demikian, saya tetap merasa perlu untuk memulai review ini dengan memaparkan definisi dan karakteristik seorang pragmatic programmer menurut Thomas dan Hunt.

Jadi, apa yang dimaksud Thomas dan Hunt dengan pragmatic programmer?” Dalam mukaddimah The Pragmatic Programmer, Thomas dan Hunt menyebut bahwa kata pragmatis berasal dari bahasa latin “pragmaticus” yang artinya “cakap/terampil dalam bisnis”. Seorang pragmatic programmer, menurut Thomas dan Hunt, bisa dideskripsikan dalam dua frase berikut, get the job done, and do it well.

Secara lebih rinci, Thomas dan Hunt menyebutkan bahwa seorang pragmatic programmer umumnya memiliki satu atau lebih karakteristik dari lima karakteristik berikut: suka mencoba hal-hal baru (early adopter/fast adopter), penuh rasa ingin tahu (inquisitive), berpikir kritis (critical thinker), realistis (realistic), dan memiliki pengetahuan yang cukup dalam di beberapa bidang (jack of all trades). Di luar karakteristik tadi, ada dua karakteristik lain yang oleh Thomas dan Hunt  dianggap sangat mendasar bagi seorang pragmatic programmer. Kedua karakteristik tersebut adalah seorang pragmatic programmer peduli terhadap keterampilannya (care about your craft) dan sangat memikirkan apa yang dikerjakannya (think about your work).

Keseluruhan bab pada buku The Pragmatic Programmer membahas tentang bagaimana cara menjadi seorang pragmatic programmer versi Thomas dan Hunt. Beberapa poin yang ditulis oleh Thomas dan Hunt bersifat umum dan bisa diterapkan di banyak profesi selain programmer. Beberapa poin lainnya bersifat lebih spesifik. Terlepas dari seberapa umum atau seberapa spesifik, mayoritas poin yang ditulis oleh Thomas dan Hunt rasanya masih applicable untuk diterapkan saat ini.



Ada cukup banyak poin bahasan di The Pragmatic Programmer yang bersifat umum. Salah satunya adalah sub bab tentang portofolio pengetahuan (knowledge portofolio). Thomas dan Hunt memandang seluruh pengetahuan yang dimiliki seorang programmer sebagai sebuah portofolio pengetahuan. Oleh karena itu, Thomas dan Hunt menyarankan agar setiap programmer mengelola portofolio pengetahuannya layaknya seorang investor mengelola portofolio investasi finansialnya.

Berikut adalah hal-hal yang dilakukan oleh seorang investor profesional yang menurut Thomas dan Hunt juga harus dilakukan oleh seorang pragmatic programmer:


  Berinvestasi secara reguler
Seorang invesor yang serius, berinvestasi secara reguler. Demikian juga, seorang yang serius hendak menjadi pragmatic programmer perlu berinvestasi mempelajari teknologi secara reguler, baik mempelajari teknologi baru atau memperdalam pengetahuan pada teknologi yang sudah dikuasainya.
  Diversifikasi
Untuk mencapai sukses jangka panjang, seorang investor harus melakukan diversifikasi terhadap investasinya. Bagi seorang pragmatic programmer, diversifikasi bisa dilakukan dengan mempelajari teknologi yang berbeda dari yang biasa ia gunakan sehari-hari.
  Mengelola resiko
Investor yang cerdas mengelola resiko dengan mendistribusikan portofolionya secara proporsional antara investasi yang konservatif dengan investasi yang bersifat high-risk namun high-reward. Dalam konteks portofolio pengetahuan, mengelola resiko dilakukan dengan mendistribusikan investasi waktu untuk mempelajari teknologi secara berimbang. Ada sebagian waktu yang digunakan untuk mempelajari teknologi yang sudah proven, dan ada sebagian waktu yang digunakan untuk mempelajari teknologi yang masih berada di fase awal pengembangan.
  Buy low, sell high
Investor yang baik selalu berusaha memaksimalkan profit dengan membeli ketika harga rendah (buy low) dan menjual ketika harga tinggi (sell high).  Buy low bisa diartikan sebagai berinvestasi pada teknologi yang masih belum banyak digunakan orang. Seorang programmer yang menjadi early adopter pada suatu teknologi tentunya memiliki tingkat proficiency yang lebih tinggi dari kebanyakan orang ketika teknologi tersebut menjadi arus utama.
  Evaluasi
Investor yang baik selalu mengevaluasi portofolionya secara periodik. Seorang pragmatic programmer selalu mengevaluasi teknologi mana dari portofolio pengetahuannya yang perlu diperdalam lebih lanjut dan teknologi mana yang sudah menjadi obsolete.


Ada juga poin-poin di buku The Pragmatic Programmer yang tidak terlalu generik di satu sisi, tapi juga tidak terlalu spesifik di sisi lain. Misalnya poin tentang The DRY Principle. DRY pada The DRY Principle merupakan singkatan dari Don’t Repeat Yourself. Secara verbatim, The DRY Principle berbunyi, “setiap bagian dari pengetahuan harus memiliki satu representasi yang autoritatif dan tidak ambigu”. Dalam contoh yang sangat sederhana, implementasi prinsip DRY bisa dilihat pada potongan kode di bawah ini. Pada kode di bawah, prinsip DRY diterapkan dengan membungkus blok kode yang ditulis berulang sebagai sebuah komponen yang mudah untuk digunakan kembali.

# Alih-alih menulis dua view seperti berikut:

# View 1: new.html.erb

&amp;lt;h1&amp;gt;New post&amp;lt;/h1&amp;gt;

&amp;lt;% form_for(@post) do |f| %&amp;gt;
  &amp;lt;%= f.error_messages %&amp;gt;

  &amp;lt;p&amp;gt;
    &amp;lt;%= f.label :name %&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;%= f.text_field :name %&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;%= f.label :title, &quot;title&quot; %&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;%= f.text_field :title %&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;%= f.label :content %&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;%= f.text_area :content %&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;%= f.submit &quot;Save&quot; %&amp;gt;
  &amp;lt;/p&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;%= link_to 'Back', posts_path %&amp;gt;

# View 2: edit.html.erb

&amp;lt;h1&amp;gt;Editing post&amp;lt;/h1&amp;gt;

&amp;lt;% form_for(@post) do |f| %&amp;gt;
  &amp;lt;%= f.error_messages %&amp;gt;

  &amp;lt;p&amp;gt;
    &amp;lt;%= f.label :name %&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;%= f.text_field :name %&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;%= f.label :title, &quot;title&quot; %&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;%= f.text_field :title %&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;%= f.label :content %&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;%= f.text_area :content %&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;%= f.submit &quot;Save&quot; %&amp;gt;
  &amp;lt;/p&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;%= link_to 'Show', @post %&amp;gt; |
&amp;lt;%= link_to 'Back', posts_path %&amp;gt;

# Rails membuat partial view 
# dengan memindahkan blok kode form_for yang berulang
# menjadi sebuah template yang reusable sebagai berikut:

# View 1: new.html.erb

&amp;lt;h1&amp;gt;New post&amp;lt;/h1&amp;gt;

&amp;lt;%= render :partial =&amp;gt; &quot;form&quot; %&amp;gt;

&amp;lt;%= link_to 'Back', posts_path %&amp;gt;

# View 2: edit.html.erb

&amp;lt;h1&amp;gt;Editing post&amp;lt;/h1&amp;gt;

&amp;lt;%= render :partial =&amp;gt; &quot;form&quot; %&amp;gt;

&amp;lt;%= link_to 'Show', @post %&amp;gt; |
&amp;lt;%= link_to 'Back', posts_path %&amp;gt;

# Partial: _form.html.erb

&amp;lt;% form_for(@post) do |f| %&amp;gt;
  &amp;lt;%= f.error_messages %&amp;gt;

  &amp;lt;p&amp;gt;
    &amp;lt;%= f.label :name %&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;%= f.text_field :name %&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;%= f.label :title, &quot;title&quot; %&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;%= f.text_field :title %&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;%= f.label :content %&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;%= f.text_area :content %&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;%= f.submit &quot;Save&quot; %&amp;gt;
  &amp;lt;/p&amp;gt;
&amp;lt;% end %&amp;gt;




Meski prinsip DRY merupakan sebuah poin yang cukup spesifik, implementasi prinsip ini di berbagai teknologi dan bahasa pemrograman bisa berbeda-beda. Pada framework Ruby on Rails, misalnya, prinsip ini diimplementasikan dalam berbagai bentuk di seluruh layer Ruby on Rails, mulai dari models, controllers, hingga views. Sementara di spektrum lain, pada bidang DevOps, prinsip DRY merupakan salah satu prinsip utama dari pendekatan declarative code yang digunakan oleh beberapa tools infrastructure as code (IAC) seperti Terraform, CloudFormation, SaltStack, dan Puppet.

</content>
      <categories>
        
          <category> Books </category>
        
      </categories>
      <tags>
        
          <tag> Book Review </tag>
        
          <tag> The Pragmatic Programmer </tag>
        
          <tag> Software Engineering </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title>Hello World!</title>
      <url>/2018/02/16/Hello-World/</url>
      <content type="text">Hello World! My name is Iqbal Farabi and I write codes for a living. I will write posts on software engineering topics in this blog. Mainly, I will try to share things I learn from my activities, both in my daily work or in my own time as a hobby. Hopefully this blog is any use for you!

Halo! Perkenalkan, nama saya Iqbal Farabi. Sehari-hari saya bekerja sebagai seorang backend engineer. Blog ini akan berisi tulisan-tulisan yang berhubungan dengan software engineering. Utamanya, saya akan berusaha untuk berbagi hal-hal yang saya pelajari dari aktivitas saya, baik yang bersifat profesional di pekerjaan saya sehari-hari maupun yang bersifat hobi. Harapan saya, semoga blog ini bermanfaat bagi pembacanya.
</content>
      <categories>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
