<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-08-05T18:41:07+07:00</updated><id>http://localhost:4000/</id><title type="html">QBLFRB</title><author><name>Iqbal Farabi</name></author><entry><title type="html">Setting Up Rails Development Environment with Docker Compose</title><link href="http://localhost:4000/tech/2018/08/05/Setting-Up-Rails-Development-Environment-with-Docker-Compose/" rel="alternate" type="text/html" title="Setting Up Rails Development Environment with Docker Compose" /><published>2018-08-05T00:00:00+07:00</published><updated>2018-08-05T00:00:00+07:00</updated><id>http://localhost:4000/tech/2018/08/05/Setting-Up-Rails-Development-Environment-with-Docker-Compose</id><content type="html" xml:base="http://localhost:4000/tech/2018/08/05/Setting-Up-Rails-Development-Environment-with-Docker-Compose/">&lt;p&gt;Hi folks! This guide is mostly written for participants of Go-Jek x BNCC bootcamp. But anyone who wishes to know how to setup his/her Rails development environment with Docker Compose is welcome as well. Just note that some examples here are specific to the sources I use for the bootcamp.&lt;/p&gt;

&lt;p&gt;Since this guide is aimed at students who might be not familiar yet with containers in general, let me explain in a brief what containers are. Containers are a method of operating system virtualization that allow us to run an application and its dependencies in isolation within our actual operating system on our machine (be it a laptop, desktop, or some remote hosted server). Docker is one of container platform tools that we can use to build and manage containers. 
Lastly, Docker Compose is a tool for defining and running multi-container Docker applications.&lt;/p&gt;

&lt;p&gt;You probably now have more questions than answers after reading the paragraph above. That is fine. In fact, that is great. If you are curious about container technology, you can read more about it in &lt;a href=&quot;https://medium.freecodecamp.org/a-beginner-friendly-introduction-to-containers-vms-and-docker-79a9e3e119b&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install Docker on Your Machine&lt;/p&gt;

    &lt;p&gt;Since you are likely have different machines and operating systems (MacOS, Linux, Windows), I would rather you take a look at &lt;a href=&quot;https://docs.docker.com/install/&quot;&gt;Docker official documentation&lt;/a&gt; and try to install it by following the guideline there on your own.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create Dockerfile&lt;/p&gt;

    &lt;p&gt;In your working directory, create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; and fill it with:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  FROM ruby:2.5
  RUN apt-get update -qq &amp;amp;&amp;amp; apt-get install -y build-essential libpq-dev nodejs
  RUN mkdir /bncc
  WORKDIR /bncc
  COPY Gemfile /bncc/Gemfile
  COPY Gemfile.lock /bncc/Gemfile.lock
  RUN bundle install
  COPY . /bncc
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Just note that you can use replace &lt;code class=&quot;highlighter-rouge&quot;&gt;bncc&lt;/code&gt; with any directory name that you want.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create Initial Gemfile&lt;/p&gt;

    &lt;p&gt;Now, create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; and fill it with:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  source 'https://rubygems.org'
  gem 'rails', '5.0.2'
  gem 'public_suffix', '~&amp;gt; 3.0.2'
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;This will install required gems specific to our workshop requirements (Rails version 5.0.2).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create Gemfile.lock&lt;/p&gt;

    &lt;p&gt;Create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; and leave it empty for the time being.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yaml&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yaml&lt;/code&gt; and fill it with:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  version: '3'
  services:
    db:
      image: postgres
      volumes:
        - ./tmp/db:/var/lib/postgresql/data
    web:
      build: .
      command: bundle exec rails s -p 3000 -b '0.0.0.0'
      volumes:
        - .:/bncc
      ports:
        - &quot;3000:3000&quot;
      depends_on:
        - db
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Don’t forget to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;bncc&lt;/code&gt; with the name of directory that you use in Step 1.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Build The Project&lt;/p&gt;

    &lt;p&gt;Run this command:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker-compose run web rails new . --force --database=postgresql
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;&lt;strong&gt;ONLY FOR LINUX USERS:&lt;/strong&gt; If you run the previous command in Linux, there is a good chance that your newly created files are created with &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; account by Docker. You need to change them to regular files by running the following command:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo chown -R $USER:$USER .
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Now this part is for everyone again, run the following command:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker-compose build
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;It may take some time as Docker needs to download and setup a lot of things for your development environment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Modify Database Configuration&lt;/p&gt;

    &lt;p&gt;Next, we need to change our &lt;code class=&quot;highlighter-rouge&quot;&gt;config/database.yml&lt;/code&gt; file. Make sure your database configuration file has the following lines:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  default: &amp;amp;default
    adapter: postgresql
    encoding: unicode
    host: db
    username: postgres
    password:
    pool: 5

  development:
    &amp;lt;&amp;lt;: *default
    database: bncc_development

  test:
    &amp;lt;&amp;lt;: *default
    database: bncc_test
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Boot The App&lt;/p&gt;

    &lt;p&gt;Once the previous command is finished, you can boot your app with:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker-compose up
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Afterward, we need to create the database. &lt;strong&gt;Do the following command in the same folder but from a different terminal&lt;/strong&gt;:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker-compose run web rake db:create
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Now you should be able to see the Rails welcome page when you open &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:3000&lt;/code&gt; from your browser.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Find Your Container&lt;/p&gt;

    &lt;p&gt;Now that you have Docker container up and running, you can get inside your container. First you need to know the name of your container. Find out with:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker ps
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;The result should look something like this (you might need to scroll to the right):&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
  0e1bb4260f52        bncc_web            &quot;bundle exec rails s…&quot;   14 seconds ago      Up 13 seconds       0.0.0.0:3000-&amp;gt;3000/tcp   bncc_web_1
  3bc7089f6ccd        postgres            &quot;docker-entrypoint.s…&quot;   8 minutes ago       Up 14 seconds       5432/tcp                 bncc_db_1
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;In this case, the name of the container that we want to enter is &lt;code class=&quot;highlighter-rouge&quot;&gt;bncc_web_1&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter The Container&lt;/p&gt;

    &lt;p&gt;Run the following command:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker exec -it bncc_web_1 /bin/bash
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Don’t forget to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;bncc_web_1&lt;/code&gt; with the actual name that you see as the result of your &lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt; command.&lt;/p&gt;

    &lt;p&gt;Now you can make changes to your Rails project from your host operating system while run terminal commands in your Docker &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/bash&lt;/code&gt; environment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stop and Start&lt;/p&gt;

    &lt;p&gt;To stop your app, run this command &lt;strong&gt;in a different terminal from the one that runs your &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker-compose down
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;To start it again, you might have guessed it right by now:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker-compose up
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Iqbal Farabi</name></author><category term="Container" /><category term="Docker" /><category term="Rails" /><category term="Ruby" /><summary type="html">Hi folks! This guide is mostly written for participants of Go-Jek x BNCC bootcamp. But anyone who wishes to know how to setup his/her Rails development environment with Docker Compose is welcome as well. Just note that some examples here are specific to the sources I use for the bootcamp.</summary></entry><entry><title type="html">Yang Fana adalah Waktu, Pragmatisme Abadi</title><link href="http://localhost:4000/books/2018/07/08/yang-fana-adalah-waktu-pragmatisme-abadi/" rel="alternate" type="text/html" title="Yang Fana adalah Waktu, Pragmatisme Abadi" /><published>2018-07-08T00:00:00+07:00</published><updated>2018-07-08T00:00:00+07:00</updated><id>http://localhost:4000/books/2018/07/08/yang-fana-adalah-waktu-pragmatisme-abadi</id><content type="html" xml:base="http://localhost:4000/books/2018/07/08/yang-fana-adalah-waktu-pragmatisme-abadi/">&lt;p&gt;Sudah sekitar tujuh bulan terakhir saya &lt;em&gt;banting setir&lt;/em&gt;. Setelah delapan tahun lebih menyebut diri sendiri sebagai seorang &lt;em&gt;Ruby programmer&lt;/em&gt;, pada awal Januari tahun ini saya beralih menjadi seorang &lt;em&gt;system engineer&lt;/em&gt;. Salah satu dampak utama dari alih profesi ini, saya harus belajar banyak hal baru. Bagaimana tidak, ketika pertama kali mendapat &lt;em&gt;brief&lt;/em&gt; tentang peran baru saya ini, barangkali sekitar 80% teknologi yang diucapkan pada &lt;em&gt;brief&lt;/em&gt; tersebut belum pernah saya gunakan secara profesional.&lt;/p&gt;

&lt;p&gt;Tiap orang tentu punya cara yang berbeda dalam mempelajari sesuatu. Bagi saya, cara yang sejauh ini terbukti efektif buat diri sendiri adalah dengan membaca beberapa buku tentang topik yang sedang saya pelajari. Untuk mempelajari tentang Kubernetes, misalnya, saya membaca dua judul buku, “Kubernetes: Up and Running” dan “Kubernetes in Action”. Belajar dari beberapa buku memberi saya perspektif yang lebih beragam mengenai satu topik. Konsep semacam &lt;em&gt;namespace&lt;/em&gt; pada &lt;em&gt;container&lt;/em&gt;, misal yang lain, terasa lebih mudah dan lebih komprehensif untuk dipahami ketika saya mempelajarinya dari beberapa sumber.&lt;/p&gt;

&lt;p&gt;Salah satu &lt;em&gt;rule of thumb&lt;/em&gt; yang saya pegang dalam mencari buku bacaan untuk mempelajari sebuah topik adalah tidak menggunakan buku yang terbit lebih lampau dari tiga tahun lalu. Aturan ini menjadi relevan teruma ketika topik yang dipelajari adalah teknologi informasi. Pasalnya, perkembangan teknologi informasi memang relatif cepat. Jika kita menggunakan buku yang tidak &lt;em&gt;up to date&lt;/em&gt;, besar kemungkinan ada perubahan pada teknologi yang kita pelajari yang belum terdokumentasikan di buku tersebut.&lt;/p&gt;

&lt;p&gt;Sebagai contoh spesifik, kalau hari ini kita mempelajari &lt;em&gt;framework&lt;/em&gt; Ruby on Rails dari buku “Agile Development Method with Rails 4” terbitan tahun 2013, kita akan menemukan beberapa kendala karena versi Rails yang diulas pada buku tersebut masih Rails 4 sementara versi Rails &lt;em&gt;default&lt;/em&gt; yang bisa kita unduh dari situs resmi Rails saat ini adalah Rails 5.1. Beberapa fitur baru yang ada di Rails 5.1 tentu tidak akan kita temui pada buku tersebut. Sementara beberapa fitur yang sudah &lt;em&gt;deprecated&lt;/em&gt; pada Rails 5.1 barangkali masih diulas di sana.&lt;/p&gt;

&lt;p&gt;Oleh karena itu, rasanya tak keliru kalau saya katakan sangat sulit untuk menulis sebuah buku tentang teknologi informasi yang bersifat teknis sekaligus tetap relevan dalam waktu yang lama. Buku semacam “Agile Development Method with Rails” menyiasatinya dengan perbaruan terus menerus. Edisi terakhir “Agile Development Method with Rails 5.1” dirilis pada November 2017 lalu, hanya berjarak sekitar satu tahun dari “Agile Development with Rails 5” yang dirilis pada September 2016.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Satu dari sedikit buku yang berhasil melawan kutukan keusangan adalah buku The Pragmatic Programmer karya David Thomas dan Andrew Hunt. Dipublikasikan pertama kali pada Oktober 1999, The Pragmatic Programmer masih terasa relevan bagi saya saat ini. Hampir dua puluh tahun sejak terbitan perdananya, apa-apa yang ditulis oleh Thomas dan Hunt di The Pragmatic Programmer masih beresonansi dengan masalah yang kita temui di industri teknologi informasi hari-hari ini.&lt;/p&gt;

&lt;p&gt;Saya ambil contoh prinsip &lt;em&gt;don’t repeat yourself&lt;/em&gt; atau DRY. Secara verbatim, prinsip ini didefinisikan oleh Thomas dan Hunt di The Pragmatic Programmer dengan redaksi sebagai berikut, &lt;em&gt;“every piece of knowledge must have a single, unambiguous, authoritative representation within a system”&lt;/em&gt;. Salah satu penerapan awal dari prinsip ini adalah dengan melakukan otomasi terhadap dokumentasi kode. Dalam perkembangannya, prinsip ini menjadi salah satu faktor yang mendorong lahirnya disiplin Infrastructure as Code dan &lt;em&gt;declarative programming&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Apa yang membuat The Pragmatic Programmer tak lekang waktu? Saya kira salah satunya adalah karena pola pikir kedua penulisnya yang memandang bahwa ilmu, pengetahuan, dan pengalaman seorang &lt;em&gt;programmer&lt;/em&gt; harus dikelola selayaknya portofolio investasi finansial. Thomas dan Hunt secara eksplisit menyebutnya sebagai “portofolio pengetahuan”.&lt;/p&gt;

&lt;p&gt;Layaknya seorang investor finansial, menurut Thomas dan Hunt, seorang &lt;em&gt;programmer&lt;/em&gt; yang baik harus berinvestasi secara reguler. Implikasinya, seorang &lt;em&gt;programmer&lt;/em&gt; harus senantiasa mempelajari hal baru, melakukan diversifikasi teknologi yang dipelajarinya, dan mengelola resiko investasi dengan baik. Mempelajari teknologi &lt;em&gt;cutting edge&lt;/em&gt;, misalnya, bisa dikategorikan sebagai investasi &lt;em&gt;high risk&lt;/em&gt; yang harus diimbangi dengan mempelajari lebih dalam teknologi yang lebih &lt;em&gt;mature&lt;/em&gt; dan memang digunakan dalam pekerjaan kita sehari-hari. Thomas dan Hunt bahkan merinci beberapa langkah kongkret yang perlu dilakukan oleh seorang &lt;em&gt;programmer&lt;/em&gt; untuk memperkaya portofolio pengetahuannya. Langkah-langkah tersebut di antaranya: mempelajari minimal satu bahasa pemrograman setiap tahun, membaca satu buku teknis setiap satu kuartal, membaca buku-buku non teknis, dan berjejaring dengan komunitas teknologi.&lt;/p&gt;

&lt;p&gt;Dengan pola pikir di atas, saya kira tak mengherankan jika Thomas dan Hunt berhasil menuliskan prinsip-prinsip fundamental yang cenderung terus relevan dengan permasalahan yang ditemui oleh para &lt;em&gt;programmer&lt;/em&gt; hingga hari ini, meski mungkin dalam bentuk yang sedikit berbeda. Prinsip meminimalisir &lt;em&gt;coupling&lt;/em&gt; antar tiap bagian dalam kode kita, misalnya, di masa The Pragmatic Programmer ditulis barangkali baru dipraktekkan dalam bentuk penerapan Law of Demeter ketika menulis fungsi atau &lt;em&gt;method&lt;/em&gt;. Namun prinsip yang sama, saya duga, menjadi salah satu fondasi bagi lahirnya arsitektur seperti MVC dan &lt;em&gt;microservices&lt;/em&gt; di kemudian hari.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Awal bulan lalu saya mengambil mata kuliah tentang Cloud Computing dari University of Illinois melalui platform &lt;em&gt;e-learning&lt;/em&gt; Coursera. Sebagai proyek akhir mata kuliah ini, siswa ditugaskan untuk mengimplementasikan Gossip Protocol dengan menggunakan bahasa C++. Gossip Protocol adalah sebuah prosedur komunikasi untuk mendistribusikan informasi secara cepat pada sebuah &lt;em&gt;distributed system&lt;/em&gt;. Tugas tadi menarik karena ketika saya mulai mengambil mata kuliah ini, pada saat yang bersamaan saya sedang mengerjakan beberapa tugas kantor yang berkaitan dengan Consul. Bagi kawan-kawan yang belum familiar, Consul adalah sebuah &lt;em&gt;service discovery tools&lt;/em&gt; yang biasa digunakan pada sistem dengan arsitektur &lt;em&gt;microservices&lt;/em&gt;. Nah, &lt;a href=&quot;https://www.consul.io/docs/internals/gossip.html&quot;&gt;Consul dibangun dengan menggunakan Gossip Protocol&lt;/a&gt; untuk mengelola keanggotaan sebuah &lt;em&gt;service&lt;/em&gt; pada &lt;em&gt;cluster&lt;/em&gt; dan untuk melakukan &lt;em&gt;broadcast&lt;/em&gt; pesan ke seluruh &lt;em&gt;cluster&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ketika mengambil mata kuliah ini, saya menyadari panjangnya jalan yang dibutuhkan untuk mengubah konsep akademis seperti Gossip Protocol menjadi sebuah &lt;em&gt;tools&lt;/em&gt; yang diadopsi secara luas oleh industri seperti Consul. Hal yang sama juga saya temui pada &lt;a href=&quot;https://github.com/coreos/etcd/tree/master/raft&quot;&gt;Raft Protocol yang menjadi basis dari &lt;em&gt;tools&lt;/em&gt; bernama etcd&lt;/a&gt; yang kemudian menjadi salah satu komponen penting dalam membuat sebuah &lt;em&gt;cluster&lt;/em&gt; Kubernetes. Perlu &lt;em&gt;craftmanship&lt;/em&gt; dan &lt;em&gt;mastery&lt;/em&gt; pada pemrograman dan &lt;em&gt;software engineering&lt;/em&gt; untuk bisa menciptakan &lt;em&gt;tools&lt;/em&gt; semacam ini.&lt;/p&gt;

&lt;p&gt;Kembali ke buku The Pragmatic Programmer, sejujurnya saya agak khawatir &lt;em&gt;review&lt;/em&gt; pendek ini gagal menjadi duta yang representatif bagi buku ini. Penyebabnya, masih banyak poin penting yang belum saya singgung pada tulisan yang singkat ini. Hampir setiap gagasan utama yang diulas di The Pragmatic Programmer bisa dibahas secara panjang lebar dalam satu atau bahkan beberapa tulisan tersendiri.&lt;/p&gt;

&lt;p&gt;Kalau ada satu saja poin yang tak boleh tertinggal dari &lt;em&gt;review&lt;/em&gt; ini, barangkali adalah poin berikut: pada buku The Pragmatic Programmer, Thomas dan Hunt memaparkan dengan lengkap apa-apa yang menurut keduanya perlu bagi seorang yang ingin membangun &lt;em&gt;mastery&lt;/em&gt; dan &lt;em&gt;craftmanship&lt;/em&gt; di bidang pemrograman maupun &lt;em&gt;software engineering&lt;/em&gt; secara umum. Dalam delapan bab, Thomas dan Hunt membahas mulai dari filosofi, pola pikir, pendekatan, hingga &lt;em&gt;tools&lt;/em&gt; yang perlu dimiliki oleh seorang &lt;em&gt;pragmatic programmer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pada akhirnya, kalau ada kawan-kawan yang berkecimpung di bidang pemrograman atau &lt;em&gt;software engineering&lt;/em&gt; secara umum, saya sangat merekomendasikan untuk paling tidak pernah satu kali khatam membaca The Pragmatic Programmer. Sejauh ini gagasan-gagasan pada The Pragmatic Programmer telah menginspirasi saya untuk melakukan beberapa hal dalam upaya mengembangkan diri secara personal dan profesional, tentunya saya berharap kawan-kawan mendapatkan inspirasi yang sama.&lt;/p&gt;</content><author><name>Iqbal Farabi</name></author><category term="Book Review" /><category term="The Pragmatic Programmer" /><category term="Software Engineering" /><summary type="html">Sudah sekitar tujuh bulan terakhir saya banting setir. Setelah delapan tahun lebih menyebut diri sendiri sebagai seorang Ruby programmer, pada awal Januari tahun ini saya beralih menjadi seorang system engineer. Salah satu dampak utama dari alih profesi ini, saya harus belajar banyak hal baru. Bagaimana tidak, ketika pertama kali mendapat brief tentang peran baru saya ini, barangkali sekitar 80% teknologi yang diucapkan pada brief tersebut belum pernah saya gunakan secara profesional.</summary></entry><entry><title type="html">Hello World!</title><link href="http://localhost:4000/2018/02/16/Hello-World/" rel="alternate" type="text/html" title="Hello World!" /><published>2018-02-16T00:00:00+07:00</published><updated>2018-02-16T00:00:00+07:00</updated><id>http://localhost:4000/2018/02/16/Hello-World</id><content type="html" xml:base="http://localhost:4000/2018/02/16/Hello-World/">&lt;p&gt;Hello World! My name is Iqbal Farabi and I write codes for a living. I will write posts on software engineering topics in this blog. Mainly, I will try to share things I learn from my activities, both in my daily work or in my own time as a hobby. Hopefully this blog is any use for you!&lt;/p&gt;

&lt;p&gt;Halo! Perkenalkan, nama saya Iqbal Farabi. Sehari-hari saya bekerja sebagai seorang backend engineer. Blog ini akan berisi tulisan-tulisan yang berhubungan dengan software engineering. Utamanya, saya akan berusaha untuk berbagi hal-hal yang saya pelajari dari aktivitas saya, baik yang bersifat profesional di pekerjaan saya sehari-hari maupun yang bersifat hobi. Harapan saya, semoga blog ini bermanfaat bagi pembacanya.&lt;/p&gt;</content><author><name>Iqbal Farabi</name></author><summary type="html">Hello World! My name is Iqbal Farabi and I write codes for a living. I will write posts on software engineering topics in this blog. Mainly, I will try to share things I learn from my activities, both in my daily work or in my own time as a hobby. Hopefully this blog is any use for you!</summary></entry></feed>